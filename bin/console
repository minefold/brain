#!/usr/bin/env ruby

require 'bundler/setup'
Bundler.require :default

$:.unshift File.join File.dirname(__FILE__), '../lib'
require 'brain'
require 'prism/back'
require 'pry'

include Prism::Mongo

$mongo = mongo_connect
$pg ||= if ENV['DATABASE_URL']
  url = URI.parse(ENV['DATABASE_URL'])
  PG::Connection.new(
    host:     url.host,
    port:     url.port,
    user:     url.user,
    password: url.password,
    dbname:   url.path[1..-1]
  )
else
  PG::Connection.new(
    host: 'localhost',
    dbname: 'minefold_development'
  )
end


def oid(id)
  BSON::ObjectId(id.to_s)
end

def server(server_id)
  $mongo['servers'].find(_id:oid(server_id)).first
end

def snapshot(snapshot_id)
  $mongo['snapshots'].find(_id:oid(snapshot_id)).first
end

def snapshots(server_id)
  svr = server(server_id)

  snapshots = []
  s = snapshot(svr['snapshot_id'])
  snapshots << s
  while s['parent']
    s = snapshot(s['parent'])
    snapshots << s
  end
  snapshots
end

def set_snapshot_url(server_id, url)
  svr = server(server_id)
  update_id('snapshots', svr['snapshot_id'], '$set' => {'url' => url})
end

def update_id(coll, id, update)
  $mongo[coll].update({_id: oid(id)}, update)
end

def set_funpack(server_id, funpack_id)
  update = { '$set' => { 'funpack_id' => funpack_id } }
  $mongo['servers'].update({_id: oid(server_id)}, update)
end



binding.pry