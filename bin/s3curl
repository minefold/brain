#!/usr/bin/env ruby

# encoding: UTF-8

require 'optparse'
require 'uri'
require 'time'
require 'base64'
require 'openssl'

OptionParser.new do |o|
  o.banner = "Usage: #{$0} [options] -- [curl-options] [URL]"
  o.separator ""
  o.separator "options:"
  o.on('--put <filename>', 'PUT request (from the provided local file)') { |filename| $filename = filename }
  o.parse!
end

curl_args = ARGV

host = nil
port = nil
resource = nil
query = nil

access_key = ENV['AWS_ACCESS_KEY']
secret_key = ENV['AWS_SECRET_KEY']

if !(access_key and secret_key)
  abort "set AWS_ACCESS_KEY and AWS_SECRET_KEY"
end

if ARGV.detect{|i| i =~ /https?:\/\/([^\/:?]+)(?::(\d+))?([^?]*)(?:\?(\S+))?/}
  host, port, resource, query = $1, $2, $3, $4
  if host =~ /(.*)\.s3.amazonaws.com/
    resource = "/#{$1}#{resource}"
  end
else
  abort "no url found in curl args"
end

verb = 'GET'
content_md5 = ''
content_type = ''
http_date = Time.now.httpdate
x_amz_headers = []

if $filename
  verb = 'PUT'
end

string_to_sign = [
  verb,
  content_md5,
  content_type,
  http_date,
  # x_amz_headers.join("\n"),
  resource].join("\n")

def sign secret_key, s
  Base64.encode64(
    OpenSSL::HMAC.digest('sha1', secret_key, s)).gsub("\n", "")
end

signature = sign(secret_key, string_to_sign)

aws_args = [
  "-H 'Date: #{http_date}'",
  "-H 'Authorization: AWS #{access_key}:#{signature}'",
  "-L"
]

aws_args << "-T '#{$filename}'" if $filename

cmd = %Q{curl #{aws_args.join(' ')} #{curl_args.join(' ')}}
exec cmd

