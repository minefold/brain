#!/usr/bin/env ruby
# encoding: UTF-8
require 'bundler/setup'
Bundler.require :default, :proxy

$:.unshift File.join File.dirname(__FILE__), '../lib'
require 'brain'
require 'prism/back'

STDOUT.sync = true
EM.epoll

Bugsnag.configure do |config|
  config.api_key = ENV['BUGSNAG']
  config.release_stage = Brain.env
  config.project_root = Brain.root
  config.notify_release_stages = ['production', 'staging']
  config.use_ssl = true
end

$metrics = nil
if ENV['LIBRATO_EMAIL'] and ENV['LIBRATO_API_TOKEN']
  Librato::Metrics.authenticate ENV['LIBRATO_EMAIL'], ENV['LIBRATO_API_TOKEN']
  $metrics = Librato::Metrics::Queue.new
end

$log = Brain::Logger.new

module Prism
  EM.run do
    EM.error_handler do |e|
      $log.error(e)
      Bugsnag.notify(e)
    end

    # EM.add_periodic_timer(10) do
    #   begin
    #     $metrics.submit
    #   rescue => e
    #     puts "#{e}\n#{e.backtrace}"
    #   end
    # end

    # Pinkies.collect do |pinkies|
    #   allocator = Allocator.new(pinkies)
    #   start_options = allocator.start_options_for_new_server(4)
    #   p start_options
    # end

    subscription = PrismRedis.connect
    subscription.psubscribe "worlds:*"
    subscription.psubscribe "servers:*"
    subscription.psubscribe "workers:*"
    subscription.on :pmessage do |key, channel, message|
      Prism::Messaging.deliver_message channel, message
    end

    [ PlayerConnectionRequest,
      ServerEvent,
      ServerStartRequest,
      ServerStopRequest,
      ServerReallocateRequest ].each do |klass|
        QueueProcessor.new klass
    end

    puts "Started. #{Brain.env} mode"

  end
end
